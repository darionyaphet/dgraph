#######################
# Input Schema
#######################

type Country {
        id: ID!
        name: String! @searchable(by: "exact")
}

type Author {
        id: ID!
        name: String! @searchable(by: "hash")
        dob: DateTime @searchable
        reputation: Float @searchable
        country(filter: CountryFilter): Country
        posts(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post!] @hasInverse(field: "author")
}

type Post {
        postID: ID!
        title: String! @searchable(by: "term")
        text: String @searchable(by: "fulltext")
        numLikes: Int @searchable
        isPublished: Boolean @searchable
        postType: PostType @searchable
        author(filter: AuthorFilter): Author! @hasInverse(field: "posts")
}

enum PostType {
        Fact
        Question
        Opinion
}

#######################
# Extended Definitions
#######################

scalar Boolean
scalar DateTime
scalar Float
scalar ID
scalar Int
scalar String

enum DgraphIndex {
        int
        float
        bool
        hash
        exact
        term
        fulltext
        trigram
        year
        month
        day
        hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @searchable(by: DgraphIndex!) on FIELD_DEFINITION

input IntFilter {
        eq: Int
        le: Int
        lt: Int
        ge: Int
        gt: Int
}

input FloatFilter {
        eq: Float
        le: Float
        lt: Float
        ge: Float
        gt: Float
}

input DateTimeFilter {
        eq: DateTime
        le: DateTime
        lt: DateTime
        ge: DateTime
        gt: DateTime
}

input StringTermFilter {
        allofterms: String
        anyofterms: String
}

input StringRegExpFilter {
        regexp: String
}

input StringFullTextFilter {
        alloftext: String
        anyoftext: String
}

input StringExactFilter {
        eq: String
        le: String
        lt: String
        ge: String
        gt: String
}

input StringHashFilter {
        eq: String
}

#######################
# Generated Types
#######################

type AddAuthorPayload {
        author: Author
}

type AddCountryPayload {
        country: Country
}

type AddPostPayload {
        post: Post
}

type DeleteAuthorPayload {
        msg: String
}

type DeleteCountryPayload {
        msg: String
}

type DeletePostPayload {
        msg: String
}

type UpdateAuthorPayload {
        author: Author
}

type UpdateCountryPayload {
        country: Country
}

type UpdatePostPayload {
        post: Post
}

#######################
# Generated Enums
#######################

enum AuthorOrderable {
        dob
        reputation
}

enum CountryOrderable {
        name
}

enum PostOrderable {
        numLikes
        postType
}

#######################
# Generated Inputs
#######################

input AuthorFilter {
        name: StringHashFilter
        dob: DateTimeFilter
        reputation: FloatFilter
        and: AuthorFilter
        or: AuthorFilter
        not: AuthorFilter
}

input AuthorInput {
        name: String!
        dob: DateTime
        reputation: Float
        country: CountryRef
        posts: [PostRef!]
}

input AuthorOrder {
        asc: AuthorOrderable
        desc: AuthorOrderable
        then: AuthorOrder
}

input AuthorRef {
        id: ID!
}

input CountryFilter {
        name: StringExactFilter
        and: CountryFilter
        or: CountryFilter
        not: CountryFilter
}

input CountryInput {
        name: String!
}

input CountryOrder {
        asc: CountryOrderable
        desc: CountryOrderable
        then: CountryOrder
}

input CountryRef {
        id: ID!
}

input PatchAuthor {
        name: String
        dob: DateTime
        reputation: Float
        country: CountryRef
        posts: [PostRef!]
}

input PatchCountry {
        name: String
}

input PatchPost {
        title: String
        text: String
        numLikes: Int
        isPublished: Boolean
        postType: PostType
        author: AuthorRef
}

input PostFilter {
        title: StringTermFilter
        text: StringFullTextFilter
        numLikes: IntFilter
        isPublished: Boolean
        postType: PostType
        and: PostFilter
        or: PostFilter
        not: PostFilter
}

input PostInput {
        title: String!
        text: String
        numLikes: Int
        isPublished: Boolean
        postType: PostType
        author: AuthorRef!
}

input PostOrder {
        asc: PostOrderable
        desc: PostOrderable
        then: PostOrder
}

input PostRef {
        postID: ID!
}

input UpdateAuthorInput {
        id: ID!
        patch: PatchAuthor!
}

input UpdateCountryInput {
        id: ID!
        patch: PatchCountry!
}

input UpdatePostInput {
        postID: ID!
        patch: PatchPost!
}

#######################
# Generated Query
#######################

type Query {
        getCountry(id: ID!): Country
        queryCountry(filter: CountryFilter, order: CountryOrder, first: Int, offset: Int): [Country]
        getAuthor(id: ID!): Author
        queryAuthor(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
        getPost(id: ID!): Post
        queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
}

#######################
# Generated Mutations
#######################

type Mutation {
        addCountry(input: CountryInput!): AddCountryPayload
        updateCountry(input: UpdateCountryInput!): UpdateCountryPayload
        deleteCountry(id: ID!): DeleteCountryPayload
        addAuthor(input: AuthorInput!): AddAuthorPayload
        updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
        deleteAuthor(id: ID!): DeleteAuthorPayload
        addPost(input: PostInput!): AddPostPayload
        updatePost(input: UpdatePostInput!): UpdatePostPayload
        deletePost(id: ID!): DeletePostPayload
}
